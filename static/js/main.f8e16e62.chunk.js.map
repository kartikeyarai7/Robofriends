{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/Cardlist.js","components/SearchBox.js","components/Scroll.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","props","className","alt","src","id","name","email","Cardlist","CardArray","robots","map","element","i","SearchBox","type","placeholder","onChange","searchChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","console","log","target","value","setState","searchfield","state","fetch","response","json","users","filteredRobots","this","filter","robot","toLowerCase","includes","length","Component","ReactDOM","render","document","getElementById"],"mappings":"wMAYeA,G,MAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,kDCeCQ,EAnBF,SAAAC,GAEX,OACE,sBAAKC,UAAU,+CAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAAMI,GAAhC,cACrB,gCACE,oBAAIH,UAAU,KAAd,SAAoBD,EAAMK,OAC1B,mBAAGJ,UAAU,KAAb,SAAmBD,EAAMM,eCClBC,EARE,SAAAP,GAEf,IAAMQ,EAAYR,EAAMS,OAAOC,KAAI,SAACC,EAASC,GAC3C,OAAO,cAAC,EAAD,CAA+BP,KAAML,EAAMS,OAAOG,GAAGP,KAAMD,GAAIJ,EAAMS,OAAOG,GAAGR,GAAIE,MAAON,EAAMS,OAAOG,GAAGN,OAA/FN,EAAMS,OAAOG,GAAGR,OAEpC,OAAO,8BAAMI,KCGAK,EARG,SAAAb,GAChB,OACE,qBAAKC,UAAU,SAAf,SACE,uBAAOA,UAAU,mCAAmCa,KAAK,SAASC,YAAY,gBAAgBC,SAAUhB,EAAMiB,kBCArGC,G,MAJA,SAAAlB,GACb,OAAO,qBAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAAtE,SAAkFtB,EAAMuB,aCoDlFC,E,kDA9Cb,aAAe,IAAD,8BACZ,gBAmBFC,eAAiB,SAAAC,GACfC,QAAQC,IAAIF,EAAMG,OAAOC,OACzB,EAAKC,SAAS,CAAEC,YAAaN,EAAMG,OAAOC,SApB1C,EAAKG,MAAQ,CACXxB,OAAQ,GACRuB,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBE,MAAM,8CACHzC,MAAK,SAAA0C,GACJ,OAAOA,EAASC,UAEjB3C,MAAK,SAAA4C,GACJ,EAAKN,SAAS,CACZtB,OAAQ4B,S,oBAUhB,WAAU,IAAD,OACDC,EAAiBC,KAAKN,MAAMxB,OAAO+B,QAAO,SAAAC,GAC9C,OAAOA,EAAMpC,KAAKqC,cAAcC,SAAS,EAAKV,MAAMD,YAAYU,kBAGlE,OAAKH,KAAKN,MAAMxB,OAAOmC,OAInB,gCACE,oBAAI3C,UAAU,QAAd,yBACA,cAAC,EAAD,CAAWgB,aAAcsB,KAAKd,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,CAAUhB,OAAQ6B,SAPjB,6C,GAhCKO,aCDlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjD3D,M","file":"static/js/main.f8e16e62.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nconst Card = props => {\r\n  //   const { name, email, id } = { props };\r\n  return (\r\n    <div className=\"bg-light-green dib br3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robots\" src={`https://robohash.org/${props.id}?100x100`} />\r\n      <div>\r\n        <h2 className=\"tc\">{props.name}</h2>\r\n        <p className=\"tc\">{props.email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// class Card extends Component {\r\n//   render() {\r\n//     return <div>Cards hereeeee</div>;\r\n//   }\r\n// }\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst Cardlist = props => {\r\n  //   const { robots } = { props };\r\n  const CardArray = props.robots.map((element, i) => {\r\n    return <Card key={props.robots[i].id} name={props.robots[i].name} id={props.robots[i].id} email={props.robots[i].email} />;\r\n  });\r\n  return <div>{CardArray}</div>;\r\n};\r\n\r\nexport default Cardlist;\r\n","import React from \"react\";\r\nimport \"tachyons\";\r\n\r\nconst SearchBox = props => {\r\n  return (\r\n    <div className=\"tc pa2\">\r\n      <input className=\"pa3 ba b--green bg-lightest-blue\" type=\"search\" placeholder=\"Search Robots\" onChange={props.searchChange} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import React from \"react\";\r\n\r\nconst Scroll = props => {\r\n  return <div style={{ overflowY: \"scroll\", border: \"5px solid black\", height: \"800px\" }}>{props.children}</div>;\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from \"react\";\r\nimport Cardlist from \"../components/Cardlist\";\r\n// import { robots } from \"./robots\";\r\nimport SearchBox from \"../components/SearchBox\";\r\nimport \"tachyons\";\r\nimport \"./App.css\";\r\nimport Scroll from \"../components/Scroll\";\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(users => {\r\n        this.setState({\r\n          robots: users\r\n        });\r\n      });\r\n  }\r\n\r\n  onSearchChange = event => {\r\n    console.log(event.target.value);\r\n    this.setState({ searchfield: event.target.value });\r\n  };\r\n\r\n  render() {\r\n    const filteredRobots = this.state.robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n    });\r\n\r\n    if (!this.state.robots.length) {\r\n      return <h1>Loading</h1>;\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h1 className=\"tc f2\">Robofriends</h1>\r\n          <SearchBox searchChange={this.onSearchChange} />\r\n          <Scroll>\r\n            <Cardlist robots={filteredRobots} />\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}